---
- name: "Install packages"
  register: output
  changed_when: output.changed != true
  ansible.builtin.package:
    name:
      - "ca-certificates"
      - "curl"
      - "gnupg"
      - "lsb-release"

- name: "Deploy Docker Swarm"
  block:
    - name: "Set first node manager"
      when: add_docker_swarm_is_manager | default (false)
      run_once: true
      block:
        - name: "Initialize Docker Swarm on manager: no SSL"
          when: not (add_docker_swarm_ssl | default(false))
          community.docker.docker_swarm:
            state: present
            name: "{{ add_docker_swarm_swarmname }}"
            advertise_addr: "{{ ansible_host }}"

        - name: "Initialize Docker Swarm on manager: SSL"
          when: (add_docker_swarm_ssl | default(false)) and not (add_docker_swarm_ca | default(false))
          community.docker.docker_swarm:
            state: present
            name: "{{ add_docker_swarm_swarmname }}"
            advertise_addr: "{{ ansible_host }}"
            validate_certs: "{{ add_docker_swarm_ssl_verify_cert | default(false) }}"
            tls_hostname: "{{ add_docker_swarm_tls_name }}"
            client_cert: "{{ add_docker_swarm_cert }}"
            client_key: "{{ add_docker_swarm_key }}"

        - name: "Initialize Docker Swarm on manager: mTLS"
          when: (add_docker_swarm_ssl | default(false)) and (add_docker_swarm_ca | default(false))
          community.docker.docker_swarm:
            state: present
            name: "{{ add_docker_swarm_swarmname }}"
            advertise_addr: "{{ ansible_host }}"
            validate_certs: "{{ add_docker_swarm_ssl_verify_cert | default(false) }}"
            tls_hostname: "{{ add_docker_swarm_tls_name }}"
            client_cert: "{{ add_docker_swarm_cert }}"
            client_key: "{{ add_docker_swarm_key }}"
            ca_cert: "{{ add_docker_swarm_ca }}"

        - name: "Retrieve Worker join Token"
          register: manager_swarm_join_token_worker
          changed_when: manager_swarm_join_token_worker.stdout_lines[0]
          ansible.builtin.command: >
            docker swarm join-token worker -q

        - name: "Retrieve Manager join Token"
          register: manager_swarm_join_token_manager
          changed_when: manager_swarm_join_token_manager.stdout_lines[0]
          ansible.builtin.command: >
            docker swarm join-token manager -q

        - name: "Set Fact with Manager Token"
          ansible.legacy.set_fact:
            swarm_join_token_worker: "{{ manager_swarm_join_token_worker.stdout_lines[0] }}"
            swarm_join_token_manager: "{{ manager_swarm_join_token_manager.stdout_lines[0] }}"
            swarm_node_manager: "{{ ansible_host }}"

    - name: "Join main manager: managers"
      when: (add_docker_swarm_is_manager | default (false)) and ( ansible_host != (swarm_node_manager | default(ansible_host))
      throttle: 1
      block:
        - name: "Join as Manager: no SSL"
          when: not (add_docker_swarm_ssl | default(false))
          community.docker.docker_swarm:
            state: joined
            remote_addrs: "{{ ansible_host }}"
            join_token: "{{ swarm_join_token_manager }}"

        - name: "Join as Manager: SSL"
          when: (add_docker_swarm_ssl | default(false)) and not (add_docker_swarm_ca | default(false))
          community.docker.docker_swarm:
            state: joined
            remote_addrs: "{{ ansible_host }}"
            validate_certs: "{{ add_docker_swarm_ssl_verify_cert | default(false) }}"
            tls_hostname: "{{ add_docker_swarm_tls_name }}"
            client_cert: "{{ add_docker_swarm_cert }}"
            client_key: "{{ add_docker_swarm_key }}"
            join_token: "{{ swarm_join_token_manager }}"

        - name: "Join as Manager: mTLS"
          when: (add_docker_swarm_ssl | default(false)) and (add_docker_swarm_ca | default(false))
          community.docker.docker_swarm:
            state: joined
            remote_addrs: "{{ ansible_host }}"
            validate_certs: "{{ add_docker_swarm_ssl_verify_cert | default(false) }}"
            tls_hostname: "{{ add_docker_swarm_tls_name }}"
            client_cert: "{{ add_docker_swarm_cert }}"
            client_key: "{{ add_docker_swarm_key }}"
            ca_cert: "{{ add_docker_swarm_ca }}"
            join_token: "{{ swarm_join_token_manager }}"

    - name: "Join main manager: workers"
      when: (not (add_docker_swarm_is_manager | default (false))) and ( ansible_host != (swarm_node_manager | default(ansible_host))
      throttle: 1
      block:
        - name: "Join as Worker: no SSL"
          when: not (add_docker_swarm_ssl | default(false))
          community.docker.docker_swarm:
            state: joined
            remote_addrs: "{{ ansible_host }}"
            join_token: "{{ swarm_join_token_worker }}"

        - name: "Join as Worker: SSL"
          when: (add_docker_swarm_ssl | default(false)) and not (add_docker_swarm_ca | default(false))
          community.docker.docker_swarm:
            state: joined
            remote_addrs: "{{ ansible_host }}"
            validate_certs: "{{ add_docker_swarm_ssl_verify_cert | default(false) }}"
            tls_hostname: "{{ add_docker_swarm_tls_name }}"
            client_cert: "{{ add_docker_swarm_cert }}"
            client_key: "{{ add_docker_swarm_key }}"
            join_token: "{{ swarm_join_token_worker }}"

        - name: "Join as Worker: mTLS"
          when: (add_docker_swarm_ssl | default(false)) and (add_docker_swarm_ca | default(false))
          community.docker.docker_swarm:
            state: joined
            remote_addrs: "{{ ansible_host }}"
            validate_certs: "{{ add_docker_swarm_ssl_verify_cert | default(false) }}"
            tls_hostname: "{{ add_docker_swarm_tls_name }}"
            client_cert: "{{ add_docker_swarm_cert }}"
            client_key: "{{ add_docker_swarm_key }}"
            ca_cert: "{{ add_docker_swarm_ca }}"
            join_token: "{{ swarm_join_token_worker }}"

- name: "Deploy Portainer Swarm stack"
  block:
    - name: "Create /etc/docker/swarm directory"
      register: output
      changed_when: output.size < 0
      ansible.builtin.file:
        path: "/etc/docker/swarm"
        state: directory
        recurse: yes
        owner: "root"
        group: "root"
        mode: "0700"
    - name: "Import portainer.yml stack file"
      ansible.builtin.template:
        src: "templates/portainer-stack.yml.j2"
        dest: "/etc/docker/swarm/portainer-stack.yml"
        owner: "root"
        group: "root"
        mode: "0700"

    - name: "Deploy Portainer stack"
      register: ouput
      changed_when: output.rc != 0
      ansible.builtin.command: >
        docker stack deploy -c /etc/docker/swarm/portainer-stack.yml portainer
